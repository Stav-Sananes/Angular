{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/stavsa/Documents/Angular-/clips/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nexport class AuthService {\n  constructor(auth, db) {\n    this.auth = auth;\n    this.db = db;\n    this.usersCollection = db.collection(\"users\");\n    auth.user.subscribe(console.log);\n  }\n\n  createUser(userData) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!userData.password) {\n        throw new Error(\"Password not provided!\");\n      }\n\n      const userCred = yield _this.auth.createUserWithEmailAndPassword(userData.email, userData.password);\n\n      if (!userCred.user) {\n        throw new Error(\"user cannot be found\");\n      }\n\n      yield _this.usersCollection.doc(userCred.user.uid).set({\n        name: userData.name,\n        email: userData.email,\n        age: userData.age,\n        phoneNumber: userData.phoneNumber\n      });\n      yield userCred.user.updateProfile({\n        displayName: userData.name\n      });\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["C:/Users/stavsa/Documents/Angular-/clips/src/app/services/auth.service.ts"],"names":["i0","i1","i2","AuthService","constructor","auth","db","usersCollection","collection","user","subscribe","console","log","createUser","userData","password","Error","userCred","createUserWithEmailAndPassword","email","doc","uid","set","name","age","phoneNumber","updateProfile","displayName","ɵfac","AuthService_Factory","t","ɵɵinject","AngularFireAuth","AngularFirestore","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gCAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,EAAP,EAAW;AAClB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,eAAL,GAAuBD,EAAE,CAACE,UAAH,CAAc,OAAd,CAAvB;AACAH,IAAAA,IAAI,CAACI,IAAL,CAAUC,SAAV,CAAoBC,OAAO,CAACC,GAA5B;AACH;;AACKC,EAAAA,UAAU,CAACC,QAAD,EAAW;AAAA;;AAAA;AACvB,UAAI,CAACA,QAAQ,CAACC,QAAd,EAAwB;AACpB,cAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACH;;AACD,YAAMC,QAAQ,SAAS,KAAI,CAACZ,IAAL,CAAUa,8BAAV,CAAyCJ,QAAQ,CAACK,KAAlD,EAAyDL,QAAQ,CAACC,QAAlE,CAAvB;;AACA,UAAI,CAACE,QAAQ,CAACR,IAAd,EAAoB;AAChB,cAAM,IAAIO,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,YAAM,KAAI,CAACT,eAAL,CAAqBa,GAArB,CAAyBH,QAAQ,CAACR,IAAT,CAAcY,GAAvC,EAA4CC,GAA5C,CAAgD;AAClDC,QAAAA,IAAI,EAAET,QAAQ,CAACS,IADmC;AAElDJ,QAAAA,KAAK,EAAEL,QAAQ,CAACK,KAFkC;AAGlDK,QAAAA,GAAG,EAAEV,QAAQ,CAACU,GAHoC;AAIlDC,QAAAA,WAAW,EAAEX,QAAQ,CAACW;AAJ4B,OAAhD,CAAN;AAMA,YAAMR,QAAQ,CAACR,IAAT,CAAciB,aAAd,CAA4B;AAC9BC,QAAAA,WAAW,EAAEb,QAAQ,CAACS;AADQ,OAA5B,CAAN;AAduB;AAiB1B;;AAxBoB;;AA0BzBpB,WAAW,CAACyB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI3B,WAAV,EAAuBH,EAAE,CAAC+B,QAAH,CAAY9B,EAAE,CAAC+B,eAAf,CAAvB,EAAwDhC,EAAE,CAAC+B,QAAH,CAAY7B,EAAE,CAAC+B,gBAAf,CAAxD,CAAP;AAAmG,CAAxJ;;AACA9B,WAAW,CAAC+B,KAAZ,GAAoB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEjC,WAAT;AAAsBkC,EAAAA,OAAO,EAAElC,WAAW,CAACyB,IAA3C;AAAiDU,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/fire/compat/auth\";\r\nimport * as i2 from \"@angular/fire/compat/firestore\";\r\nexport class AuthService {\r\n    constructor(auth, db) {\r\n        this.auth = auth;\r\n        this.db = db;\r\n        this.usersCollection = db.collection(\"users\");\r\n        auth.user.subscribe(console.log);\r\n    }\r\n    async createUser(userData) {\r\n        if (!userData.password) {\r\n            throw new Error(\"Password not provided!\");\r\n        }\r\n        const userCred = await this.auth.createUserWithEmailAndPassword(userData.email, userData.password);\r\n        if (!userCred.user) {\r\n            throw new Error(\"user cannot be found\");\r\n        }\r\n        await this.usersCollection.doc(userCred.user.uid).set({\r\n            name: userData.name,\r\n            email: userData.email,\r\n            age: userData.age,\r\n            phoneNumber: userData.phoneNumber,\r\n        });\r\n        await userCred.user.updateProfile({\r\n            displayName: userData.name,\r\n        });\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: \"root\" });\r\n"]},"metadata":{},"sourceType":"module"}
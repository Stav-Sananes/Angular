{"ast":null,"code":"import { map, delay } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nexport class AuthService {\n  constructor(auth, db) {\n    this.auth = auth;\n    this.db = db;\n    this.usersCollection = db.collection(\"users\");\n    this.isAuthenticated$ = auth.user.pipe(map(user => !!user));\n    this.isAuthenticatedWithDealy$ = this.isAuthenticated$.pipe(delay(1000));\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});\nasync;\ncreateUser(userData, IUser);\n{\n  if (!userData.password) {\n    throw new Error(\"Password not provided!\");\n  }\n\n  const userCred = await this.auth.createUserWithEmailAndPassword(userData.email, userData.password);\n\n  if (!userCred.user) {\n    throw new Error(\"user cannot be found\");\n  }\n\n  await this.usersCollection.doc(userCred.user.uid).set({\n    name: userData.name,\n    email: userData.email,\n    age: userData.age,\n    phoneNumber: userData.phoneNumber\n  });\n  await userCred.user.updateProfile({\n    displayName: userData.name\n  });\n}\nasync;\nlogout($event, Event);\n{\n  $event.preventDefault();\n  await this.afAuth.signOut();\n  await this.router.navigateByUrl('/');\n}","map":{"version":3,"sources":["C:/Users/stavsa/Documents/Angular-/clips/src/app/services/auth.service.ts"],"names":["map","delay","i0","i1","i2","AuthService","constructor","auth","db","usersCollection","collection","isAuthenticated$","user","pipe","isAuthenticatedWithDealy$","ɵfac","AuthService_Factory","t","ɵɵinject","AngularFireAuth","AngularFirestore","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","async","createUser","userData","IUser","password","Error","userCred","createUserWithEmailAndPassword","email","doc","uid","set","name","age","phoneNumber","updateProfile","displayName","logout","$event","Event","preventDefault","afAuth","signOut","router","navigateByUrl"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,gBAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,2BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gCAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,EAAP,EAAW;AAClB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,eAAL,GAAuBD,EAAE,CAACE,UAAH,CAAc,OAAd,CAAvB;AACA,SAAKC,gBAAL,GAAwBJ,IAAI,CAACK,IAAL,CAAUC,IAAV,CAAeb,GAAG,CAAEY,IAAD,IAAU,CAAC,CAACA,IAAb,CAAlB,CAAxB;AACA,SAAKE,yBAAL,GAAiC,KAAKH,gBAAL,CAAsBE,IAAtB,CAA2BZ,KAAK,CAAC,IAAD,CAAhC,CAAjC;AACH;;AAPoB;;AASzBI,WAAW,CAACU,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIZ,WAAV,EAAuBH,EAAE,CAACgB,QAAH,CAAYf,EAAE,CAACgB,eAAf,CAAvB,EAAwDjB,EAAE,CAACgB,QAAH,CAAYd,EAAE,CAACgB,gBAAf,CAAxD,CAAP;AAAmG,CAAxJ;;AACAf,WAAW,CAACgB,KAAZ,GAAoB,aAAcnB,EAAE,CAACoB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElB,WAAT;AAAsBmB,EAAAA,OAAO,EAAEnB,WAAW,CAACU,IAA3C;AAAiDU,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC;AACAC,KAAK;AACLC,UAAU,CAACC,QAAD,EAAWC,KAAX,CAAV;AACA;AACI,MAAI,CAACD,QAAQ,CAACE,QAAd,EAAwB;AACpB,UAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACH;;AACD,QAAMC,QAAQ,GAAG,MAAM,KAAKzB,IAAL,CAAU0B,8BAAV,CAAyCL,QAAQ,CAACM,KAAlD,EAAyDN,QAAQ,CAACE,QAAlE,CAAvB;;AACA,MAAI,CAACE,QAAQ,CAACpB,IAAd,EAAoB;AAChB,UAAM,IAAImB,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,QAAM,KAAKtB,eAAL,CAAqB0B,GAArB,CAAyBH,QAAQ,CAACpB,IAAT,CAAcwB,GAAvC,EAA4CC,GAA5C,CAAgD;AAClDC,IAAAA,IAAI,EAAEV,QAAQ,CAACU,IADmC;AAElDJ,IAAAA,KAAK,EAAEN,QAAQ,CAACM,KAFkC;AAGlDK,IAAAA,GAAG,EAAEX,QAAQ,CAACW,GAHoC;AAIlDC,IAAAA,WAAW,EAAEZ,QAAQ,CAACY;AAJ4B,GAAhD,CAAN;AAMA,QAAMR,QAAQ,CAACpB,IAAT,CAAc6B,aAAd,CAA4B;AAC9BC,IAAAA,WAAW,EAAEd,QAAQ,CAACU;AADQ,GAA5B,CAAN;AAGH;AACDZ,KAAK;AACLiB,MAAM,CAACC,MAAD,EAASC,KAAT,CAAN;AACA;AACID,EAAAA,MAAM,CAACE,cAAP;AACA,QAAM,KAAKC,MAAL,CAAYC,OAAZ,EAAN;AACA,QAAM,KAAKC,MAAL,CAAYC,aAAZ,CAA0B,GAA1B,CAAN;AACH","sourcesContent":["import { map, delay } from \"rxjs/operators\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/fire/compat/auth\";\r\nimport * as i2 from \"@angular/fire/compat/firestore\";\r\nexport class AuthService {\r\n    constructor(auth, db) {\r\n        this.auth = auth;\r\n        this.db = db;\r\n        this.usersCollection = db.collection(\"users\");\r\n        this.isAuthenticated$ = auth.user.pipe(map((user) => !!user));\r\n        this.isAuthenticatedWithDealy$ = this.isAuthenticated$.pipe(delay(1000));\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: \"root\" });\r\nasync;\r\ncreateUser(userData, IUser);\r\n{\r\n    if (!userData.password) {\r\n        throw new Error(\"Password not provided!\");\r\n    }\r\n    const userCred = await this.auth.createUserWithEmailAndPassword(userData.email, userData.password);\r\n    if (!userCred.user) {\r\n        throw new Error(\"user cannot be found\");\r\n    }\r\n    await this.usersCollection.doc(userCred.user.uid).set({\r\n        name: userData.name,\r\n        email: userData.email,\r\n        age: userData.age,\r\n        phoneNumber: userData.phoneNumber,\r\n    });\r\n    await userCred.user.updateProfile({\r\n        displayName: userData.name,\r\n    });\r\n}\r\nasync;\r\nlogout($event, Event);\r\n{\r\n    $event.preventDefault();\r\n    await this.afAuth.signOut();\r\n    await this.router.navigateByUrl('/');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}